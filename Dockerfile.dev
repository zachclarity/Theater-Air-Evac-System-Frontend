# This sets a build-time variable CI_REGISTRY, allowing the registry to be specified when building the image
ARG CI_REGISTRY

# We start from a base image that contains Node.js v22, pulled from the MDaaS managed images
FROM ${CI_REGISTRY}/mdaas/active/container-images/base-node:22

# REACT_APP_DEPLOYMENT tells the React app that it's running inside a Docker container
ENV REACT_APP_DEPLOYMENT=docker
ENV NODE_OPTIONS=--openssl-legacy-provider
ENV BROWSER=none
# Set the working directory inside the Docker container where all the app files will reside
WORKDIR /usr/src/app

# Copy all files from your project directory to the working directory in the container (minus what's in .dockerignore)
RUN apk add --no-cache \
    openjdk11-jre \
    wget \
    tar

    # Download and set up DynamoDB Local
RUN wget https://d1ni2b6xgvw0s0.cloudfront.net/dynamodb_local_latest.tar.gz && \
tar -xzf dynamodb_local_latest.tar.gz && \
rm dynamodb_local_latest.tar.gz

COPY package.json ./
COPY checkEnv.js ./


# Run commands to set up the application:
# 1. `npm ci --omit=dev`: Installs dependencies based on package-lock.json, excluding development dependencies.
# 2. `npm run build`: Builds the production version of the React app.
# 3. `npm install -g serve`: Installs 'serve' globally to serve the built app.
# 4. `npm cache clean --force`: Cleans up npm cache to reduce image size.
# 5. `adduser --disabled-password --gecos "" wat-user`: Creates a new user "wat-user" without a password.
# 6. `chown -R wat-user /usr/src/app`: Changes ownership of the app directory to "wat-user".
RUN npm i

# Create start script
COPY <<EOF /app/start.sh
#!/bin/sh
# Start DynamoDB Local in the background
java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb &

# Start React application
npm start
EOF


# Install curl, a tool to test if the app is running by making HTTP requests
RUN apk add --no-cache curl --update

# HEALTHCHECK command periodically checks if the app is up and running by sending a request to the app's local endpoint
HEALTHCHECK CMD curl --fail http://localhost:3000 || exit 2

# Expose port 3000 to allow access to the app from outside the container
EXPOSE 3000 8000

# Start the application using 'serve', which will serve the built React app on port 3000
#CMD ["npm", "run", "start"]

RUN chmod +x /app/start.sh

# Set start command
CMD ["/app/start.sh"]




